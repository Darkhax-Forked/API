/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.AuthAccessTokenRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AuthAccessToken extends TableImpl<AuthAccessTokenRecord> {

    private static final long serialVersionUID = -2105058697;

    /**
     * The reference instance of <code>diluv.AUTH_ACCESS_TOKEN</code>
     */
    public static final AuthAccessToken AUTH_ACCESS_TOKEN = new AuthAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthAccessTokenRecord> getRecordType() {
        return AuthAccessTokenRecord.class;
    }

    /**
     * The column <code>diluv.AUTH_ACCESS_TOKEN.TOKEN</code>.
     */
    public final TableField<AuthAccessTokenRecord, String> TOKEN = createField("TOKEN", org.jooq.impl.SQLDataType.VARCHAR.length(500).nullable(false), this, "");

    /**
     * The column <code>diluv.AUTH_ACCESS_TOKEN.REFRESH_TOKEN</code>.
     */
    public final TableField<AuthAccessTokenRecord, String> REFRESH_TOKEN = createField("REFRESH_TOKEN", org.jooq.impl.SQLDataType.VARCHAR.length(500).nullable(false), this, "");

    /**
     * The column <code>diluv.AUTH_ACCESS_TOKEN.USER_ID</code>.
     */
    public final TableField<AuthAccessTokenRecord, Long> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.AUTH_ACCESS_TOKEN</code> table reference
     */
    public AuthAccessToken() {
        this("AUTH_ACCESS_TOKEN", null);
    }

    /**
     * Create an aliased <code>diluv.AUTH_ACCESS_TOKEN</code> table reference
     */
    public AuthAccessToken(String alias) {
        this(alias, AUTH_ACCESS_TOKEN);
    }

    private AuthAccessToken(String alias, Table<AuthAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthAccessToken(String alias, Table<AuthAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthAccessTokenRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_ACCESS_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthAccessTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthAccessTokenRecord>>asList(Keys.KEY_AUTH_ACCESS_TOKEN_PRIMARY, Keys.KEY_AUTH_ACCESS_TOKEN_REFRESH_TOKEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthAccessTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthAccessTokenRecord, ?>>asList(Keys.AUTH_ACCESS_TOKEN_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthAccessToken as(String alias) {
        return new AuthAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthAccessToken rename(String name) {
        return new AuthAccessToken(name, null);
    }
}
