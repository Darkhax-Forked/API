/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.ProjectCommentRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjectComment extends TableImpl<ProjectCommentRecord> {

    private static final long serialVersionUID = 492679479;

    /**
     * The reference instance of <code>diluv.PROJECT_COMMENT</code>
     */
    public static final ProjectComment PROJECT_COMMENT = new ProjectComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectCommentRecord> getRecordType() {
        return ProjectCommentRecord.class;
    }

    /**
     * The column <code>diluv.PROJECT_COMMENT.ID</code>.
     */
    public final TableField<ProjectCommentRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_COMMENT.MESSAGE</code>.
     */
    public final TableField<ProjectCommentRecord, String> MESSAGE = createField("MESSAGE", org.jooq.impl.SQLDataType.VARCHAR.length(2000).nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_COMMENT.CREATED_AT</code>.
     */
    public final TableField<ProjectCommentRecord, Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>diluv.PROJECT_COMMENT.UPDATED_AT</code>.
     */
    public final TableField<ProjectCommentRecord, Timestamp> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>diluv.PROJECT_COMMENT.PARENT_ID</code>.
     */
    public final TableField<ProjectCommentRecord, Long> PARENT_ID = createField("PARENT_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>diluv.PROJECT_COMMENT.PROJECT_ID</code>.
     */
    public final TableField<ProjectCommentRecord, Long> PROJECT_ID = createField("PROJECT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_COMMENT.USER_ID</code>.
     */
    public final TableField<ProjectCommentRecord, Long> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.PROJECT_COMMENT</code> table reference
     */
    public ProjectComment() {
        this("PROJECT_COMMENT", null);
    }

    /**
     * Create an aliased <code>diluv.PROJECT_COMMENT</code> table reference
     */
    public ProjectComment(String alias) {
        this(alias, PROJECT_COMMENT);
    }

    private ProjectComment(String alias, Table<ProjectCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectComment(String alias, Table<ProjectCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectCommentRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROJECT_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectCommentRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_COMMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectCommentRecord>>asList(Keys.KEY_PROJECT_COMMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectCommentRecord, ?>>asList(Keys.PROJECT_COMMENT_IBFK_1, Keys.PROJECT_COMMENT_IBFK_2, Keys.PROJECT_COMMENT_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectComment as(String alias) {
        return new ProjectComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectComment rename(String name) {
        return new ProjectComment(name, null);
    }
}
