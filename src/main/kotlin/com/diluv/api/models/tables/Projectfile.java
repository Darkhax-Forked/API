/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.ProjectfileRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Projectfile extends TableImpl<ProjectfileRecord> {

    private static final long serialVersionUID = 892226905;

    /**
     * The reference instance of <code>diluv.projectFile</code>
     */
    public static final Projectfile PROJECTFILE = new Projectfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectfileRecord> getRecordType() {
        return ProjectfileRecord.class;
    }

    /**
     * The column <code>diluv.projectFile.id</code>.
     */
    public final TableField<ProjectfileRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.sha256</code>.
     */
    public final TableField<ProjectfileRecord, String> SHA256 = createField("sha256", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.fileName</code>.
     */
    public final TableField<ProjectfileRecord, String> FILENAME = createField("fileName", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.displayName</code>.
     */
    public final TableField<ProjectfileRecord, String> DISPLAYNAME = createField("displayName", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.size</code>.
     */
    public final TableField<ProjectfileRecord, Long> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.downloads</code>.
     */
    public final TableField<ProjectfileRecord, Long> DOWNLOADS = createField("downloads", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>diluv.projectFile.releaseType</code>.
     */
    public final TableField<ProjectfileRecord, String> RELEASETYPE = createField("releaseType", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.status</code>.
     */
    public final TableField<ProjectfileRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.createdAt</code>.
     */
    public final TableField<ProjectfileRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>diluv.projectFile.parentId</code>.
     */
    public final TableField<ProjectfileRecord, Long> PARENTID = createField("parentId", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>diluv.projectFile.projectId</code>.
     */
    public final TableField<ProjectfileRecord, Long> PROJECTID = createField("projectId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.projectFile.userId</code>.
     */
    public final TableField<ProjectfileRecord, Long> USERID = createField("userId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.projectFile</code> table reference
     */
    public Projectfile() {
        this("projectFile", null);
    }

    /**
     * Create an aliased <code>diluv.projectFile</code> table reference
     */
    public Projectfile(String alias) {
        this(alias, PROJECTFILE);
    }

    private Projectfile(String alias, Table<ProjectfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projectfile(String alias, Table<ProjectfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectfileRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROJECTFILE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectfileRecord> getPrimaryKey() {
        return Keys.KEY_PROJECTFILE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectfileRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectfileRecord>>asList(Keys.KEY_PROJECTFILE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectfileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectfileRecord, ?>>asList(Keys.PROJECTFILE_IBFK_1, Keys.PROJECTFILE_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projectfile as(String alias) {
        return new Projectfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projectfile rename(String name) {
        return new Projectfile(name, null);
    }
}
