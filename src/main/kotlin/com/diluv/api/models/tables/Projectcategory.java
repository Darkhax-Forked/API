/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.ProjectcategoryRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Projectcategory extends TableImpl<ProjectcategoryRecord> {

    private static final long serialVersionUID = -1749035380;

    /**
     * The reference instance of <code>diluv.projectCategory</code>
     */
    public static final Projectcategory PROJECTCATEGORY = new Projectcategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectcategoryRecord> getRecordType() {
        return ProjectcategoryRecord.class;
    }

    /**
     * The column <code>diluv.projectCategory.projectId</code>.
     */
    public final TableField<ProjectcategoryRecord, Long> PROJECTID = createField("projectId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.projectCategory.projectTypeCategoryId</code>.
     */
    public final TableField<ProjectcategoryRecord, Long> PROJECTTYPECATEGORYID = createField("projectTypeCategoryId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.projectCategory</code> table reference
     */
    public Projectcategory() {
        this("projectCategory", null);
    }

    /**
     * Create an aliased <code>diluv.projectCategory</code> table reference
     */
    public Projectcategory(String alias) {
        this(alias, PROJECTCATEGORY);
    }

    private Projectcategory(String alias, Table<ProjectcategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projectcategory(String alias, Table<ProjectcategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectcategoryRecord> getPrimaryKey() {
        return Keys.KEY_PROJECTCATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectcategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectcategoryRecord>>asList(Keys.KEY_PROJECTCATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectcategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectcategoryRecord, ?>>asList(Keys.PROJECTCATEGORY_IBFK_1, Keys.PROJECTCATEGORY_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projectcategory as(String alias) {
        return new Projectcategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projectcategory rename(String name) {
        return new Projectcategory(name, null);
    }
}
