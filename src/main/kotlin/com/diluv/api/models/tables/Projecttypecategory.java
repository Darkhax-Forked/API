/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.ProjecttypecategoryRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Projecttypecategory extends TableImpl<ProjecttypecategoryRecord> {

    private static final long serialVersionUID = 1016405332;

    /**
     * The reference instance of <code>diluv.projectTypeCategory</code>
     */
    public static final Projecttypecategory PROJECTTYPECATEGORY = new Projecttypecategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjecttypecategoryRecord> getRecordType() {
        return ProjecttypecategoryRecord.class;
    }

    /**
     * The column <code>diluv.projectTypeCategory.id</code>.
     */
    public final TableField<ProjecttypecategoryRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.projectTypeCategory.name</code>.
     */
    public final TableField<ProjecttypecategoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>diluv.projectTypeCategory.description</code>.
     */
    public final TableField<ProjecttypecategoryRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(2000).nullable(false), this, "");

    /**
     * The column <code>diluv.projectTypeCategory.projectTypeId</code>.
     */
    public final TableField<ProjecttypecategoryRecord, Long> PROJECTTYPEID = createField("projectTypeId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.projectTypeCategory</code> table reference
     */
    public Projecttypecategory() {
        this("projectTypeCategory", null);
    }

    /**
     * Create an aliased <code>diluv.projectTypeCategory</code> table reference
     */
    public Projecttypecategory(String alias) {
        this(alias, PROJECTTYPECATEGORY);
    }

    private Projecttypecategory(String alias, Table<ProjecttypecategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projecttypecategory(String alias, Table<ProjecttypecategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjecttypecategoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROJECTTYPECATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjecttypecategoryRecord> getPrimaryKey() {
        return Keys.KEY_PROJECTTYPECATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjecttypecategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjecttypecategoryRecord>>asList(Keys.KEY_PROJECTTYPECATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjecttypecategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjecttypecategoryRecord, ?>>asList(Keys.PROJECTTYPECATEGORY_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projecttypecategory as(String alias) {
        return new Projecttypecategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projecttypecategory rename(String name) {
        return new Projecttypecategory(name, null);
    }
}
