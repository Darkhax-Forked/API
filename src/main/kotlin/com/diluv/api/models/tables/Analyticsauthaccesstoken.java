/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.AnalyticsauthaccesstokenRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Analyticsauthaccesstoken extends TableImpl<AnalyticsauthaccesstokenRecord> {

    private static final long serialVersionUID = -1559533206;

    /**
     * The reference instance of <code>diluv.analyticsAuthAccessToken</code>
     */
    public static final Analyticsauthaccesstoken ANALYTICSAUTHACCESSTOKEN = new Analyticsauthaccesstoken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalyticsauthaccesstokenRecord> getRecordType() {
        return AnalyticsauthaccesstokenRecord.class;
    }

    /**
     * The column <code>diluv.analyticsAuthAccessToken.id</code>.
     */
    public final TableField<AnalyticsauthaccesstokenRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.analyticsAuthAccessToken.token</code>.
     */
    public final TableField<AnalyticsauthaccesstokenRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR.length(500).nullable(false), this, "");

    /**
     * The column <code>diluv.analyticsAuthAccessToken.refreshToken</code>.
     */
    public final TableField<AnalyticsauthaccesstokenRecord, String> REFRESHTOKEN = createField("refreshToken", org.jooq.impl.SQLDataType.VARCHAR.length(500).nullable(false), this, "");

    /**
     * The column <code>diluv.analyticsAuthAccessToken.createdAt</code>.
     */
    public final TableField<AnalyticsauthaccesstokenRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>diluv.analyticsAuthAccessToken.userId</code>.
     */
    public final TableField<AnalyticsauthaccesstokenRecord, Long> USERID = createField("userId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.analyticsAuthAccessToken</code> table reference
     */
    public Analyticsauthaccesstoken() {
        this("analyticsAuthAccessToken", null);
    }

    /**
     * Create an aliased <code>diluv.analyticsAuthAccessToken</code> table reference
     */
    public Analyticsauthaccesstoken(String alias) {
        this(alias, ANALYTICSAUTHACCESSTOKEN);
    }

    private Analyticsauthaccesstoken(String alias, Table<AnalyticsauthaccesstokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Analyticsauthaccesstoken(String alias, Table<AnalyticsauthaccesstokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AnalyticsauthaccesstokenRecord, Long> getIdentity() {
        return Keys.IDENTITY_ANALYTICSAUTHACCESSTOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AnalyticsauthaccesstokenRecord> getPrimaryKey() {
        return Keys.KEY_ANALYTICSAUTHACCESSTOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AnalyticsauthaccesstokenRecord>> getKeys() {
        return Arrays.<UniqueKey<AnalyticsauthaccesstokenRecord>>asList(Keys.KEY_ANALYTICSAUTHACCESSTOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AnalyticsauthaccesstokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnalyticsauthaccesstokenRecord, ?>>asList(Keys.ANALYTICSAUTHACCESSTOKEN_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Analyticsauthaccesstoken as(String alias) {
        return new Analyticsauthaccesstoken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Analyticsauthaccesstoken rename(String name) {
        return new Analyticsauthaccesstoken(name, null);
    }
}
