/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.ProjectTypeCategoryRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjectTypeCategory extends TableImpl<ProjectTypeCategoryRecord> {

    private static final long serialVersionUID = 392663457;

    /**
     * The reference instance of <code>diluv.PROJECT_TYPE_CATEGORY</code>
     */
    public static final ProjectTypeCategory PROJECT_TYPE_CATEGORY = new ProjectTypeCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectTypeCategoryRecord> getRecordType() {
        return ProjectTypeCategoryRecord.class;
    }

    /**
     * The column <code>diluv.PROJECT_TYPE_CATEGORY.ID</code>.
     */
    public final TableField<ProjectTypeCategoryRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE_CATEGORY.NAME</code>.
     */
    public final TableField<ProjectTypeCategoryRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE_CATEGORY.DESCRIPTION</code>.
     */
    public final TableField<ProjectTypeCategoryRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR.length(2000).nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE_CATEGORY.SLUG</code>.
     */
    public final TableField<ProjectTypeCategoryRecord, String> SLUG = createField("SLUG", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE_CATEGORY.PROJECT_TYPE_ID</code>.
     */
    public final TableField<ProjectTypeCategoryRecord, Long> PROJECT_TYPE_ID = createField("PROJECT_TYPE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.PROJECT_TYPE_CATEGORY</code> table reference
     */
    public ProjectTypeCategory() {
        this("PROJECT_TYPE_CATEGORY", null);
    }

    /**
     * Create an aliased <code>diluv.PROJECT_TYPE_CATEGORY</code> table reference
     */
    public ProjectTypeCategory(String alias) {
        this(alias, PROJECT_TYPE_CATEGORY);
    }

    private ProjectTypeCategory(String alias, Table<ProjectTypeCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectTypeCategory(String alias, Table<ProjectTypeCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectTypeCategoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROJECT_TYPE_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectTypeCategoryRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_TYPE_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectTypeCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectTypeCategoryRecord>>asList(Keys.KEY_PROJECT_TYPE_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectTypeCategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectTypeCategoryRecord, ?>>asList(Keys.PROJECT_TYPE_CATEGORY_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectTypeCategory as(String alias) {
        return new ProjectTypeCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectTypeCategory rename(String name) {
        return new ProjectTypeCategory(name, null);
    }
}
