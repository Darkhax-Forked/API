/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables;


import com.diluv.api.models.Diluv;
import com.diluv.api.models.Keys;
import com.diluv.api.models.tables.records.ProjectTypeRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjectType extends TableImpl<ProjectTypeRecord> {

    private static final long serialVersionUID = 929853769;

    /**
     * The reference instance of <code>diluv.PROJECT_TYPE</code>
     */
    public static final ProjectType PROJECT_TYPE = new ProjectType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectTypeRecord> getRecordType() {
        return ProjectTypeRecord.class;
    }

    /**
     * The column <code>diluv.PROJECT_TYPE.ID</code>.
     */
    public final TableField<ProjectTypeRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE.NAME</code>.
     */
    public final TableField<ProjectTypeRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(300).nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE.DESCRIPTION</code>.
     */
    public final TableField<ProjectTypeRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR.length(2000).nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE.SLUG</code>.
     */
    public final TableField<ProjectTypeRecord, String> SLUG = createField("SLUG", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE.MAX_BYTE_SIZE</code>.
     */
    public final TableField<ProjectTypeRecord, Long> MAX_BYTE_SIZE = createField("MAX_BYTE_SIZE", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>diluv.PROJECT_TYPE.GAME_ID</code>.
     */
    public final TableField<ProjectTypeRecord, Long> GAME_ID = createField("GAME_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>diluv.PROJECT_TYPE</code> table reference
     */
    public ProjectType() {
        this("PROJECT_TYPE", null);
    }

    /**
     * Create an aliased <code>diluv.PROJECT_TYPE</code> table reference
     */
    public ProjectType(String alias) {
        this(alias, PROJECT_TYPE);
    }

    private ProjectType(String alias, Table<ProjectTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectType(String alias, Table<ProjectTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diluv.DILUV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectTypeRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROJECT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectTypeRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectTypeRecord>>asList(Keys.KEY_PROJECT_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectTypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectTypeRecord, ?>>asList(Keys.PROJECT_TYPE_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectType as(String alias) {
        return new ProjectType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectType rename(String name) {
        return new ProjectType(name, null);
    }
}
