/*
 * This file is generated by jOOQ.
*/
package com.diluv.api.models.tables.records;


import com.diluv.api.models.tables.Projecttypepermission;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjecttypepermissionRecord extends UpdatableRecordImpl<ProjecttypepermissionRecord> implements Record2<Long, Integer> {

    private static final long serialVersionUID = 1103602617;

    /**
     * Setter for <code>diluv.projectTypePermission.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>diluv.projectTypePermission.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>diluv.projectTypePermission.permissionCreate</code>.
     */
    public void setPermissioncreate(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>diluv.projectTypePermission.permissionCreate</code>.
     */
    public Integer getPermissioncreate() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Long, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Long, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Projecttypepermission.PROJECTTYPEPERMISSION.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Projecttypepermission.PROJECTTYPEPERMISSION.PERMISSIONCREATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getPermissioncreate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjecttypepermissionRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjecttypepermissionRecord value2(Integer value) {
        setPermissioncreate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjecttypepermissionRecord values(Long value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjecttypepermissionRecord
     */
    public ProjecttypepermissionRecord() {
        super(Projecttypepermission.PROJECTTYPEPERMISSION);
    }

    /**
     * Create a detached, initialised ProjecttypepermissionRecord
     */
    public ProjecttypepermissionRecord(Long id, Integer permissioncreate) {
        super(Projecttypepermission.PROJECTTYPEPERMISSION);

        set(0, id);
        set(1, permissioncreate);
    }
}
