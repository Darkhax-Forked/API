buildscript {
    ext {
        vertx_version = '3.5.0'
    }
    repositories {
        jcenter()
    }
}
plugins {
    id 'idea'
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "nebula.project" version "3.4.0"
    id 'nebula.release' version '6.1.0'
}

group = 'com.diluv.api'
archivesBaseName = "API"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.diluv.api.DiluvAPI'
    }
}

shadowJar {
    classifier = 'fat'
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

dependencies {
    compile "io.vertx:vertx-web:$vertx_version"
    compile "io.vertx:vertx-web-client:$vertx_version"
    compile "io.vertx:vertx-mail-client:$vertx_version"

    compile "com.github.slugify:slugify:2.1.9"

    compile "org.slf4j:slf4j-api:1.7.25"
    compile "org.bouncycastle:bcprov-jdk15on:1.57"

    compile "commons-validator:commons-validator:1.6"

    compile "org.jooq:jooq:3.9.3"
    runtime "org.jooq:jooq-meta:3.9.3"
    runtime "org.jooq:jooq-codegen:3.9.3"
    runtime "mysql:mysql-connector-java:5.1.44"
}

idea {
    module.iml.withXml {
        def node = it.asNode()
        def content = node.component.find { it.'@name' == 'NewModuleRootManager' }.content[0]
        content.sourceFolder.each { sourceFolder ->
            if (sourceFolder.@url?.endsWith('/resources')) {
                sourceFolder.attributes().with {
                    boolean isTestSource = (remove('isTestSource') == 'true')
                    put('type', isTestSource ? 'java-test-resource' : 'java-resource')
                }
            }
        }
    }
}